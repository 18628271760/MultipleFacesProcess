// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/face.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Proprietor.InformationService {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class FaceRecongnise
  {
    static readonly string __ServiceName = "greet.FaceRecongnise";

    static readonly grpc::Marshaller<global::Proprietor.InformationService.FaceRequest> __Marshaller_greet_FaceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proprietor.InformationService.FaceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proprietor.InformationService.FaceReply> __Marshaller_greet_FaceReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proprietor.InformationService.FaceReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Proprietor.InformationService.FaceRequest, global::Proprietor.InformationService.FaceReply> __Method_RecongnizationByFace = new grpc::Method<global::Proprietor.InformationService.FaceRequest, global::Proprietor.InformationService.FaceReply>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "RecongnizationByFace",
        __Marshaller_greet_FaceRequest,
        __Marshaller_greet_FaceReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proprietor.InformationService.FaceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FaceRecongnise</summary>
    [grpc::BindServiceMethod(typeof(FaceRecongnise), "BindService")]
    public abstract partial class FaceRecongniseBase
    {
      public virtual global::System.Threading.Tasks.Task RecongnizationByFace(grpc::IAsyncStreamReader<global::Proprietor.InformationService.FaceRequest> requestStream, grpc::IServerStreamWriter<global::Proprietor.InformationService.FaceReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FaceRecongniseBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RecongnizationByFace, serviceImpl.RecongnizationByFace).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FaceRecongniseBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RecongnizationByFace, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Proprietor.InformationService.FaceRequest, global::Proprietor.InformationService.FaceReply>(serviceImpl.RecongnizationByFace));
    }

  }
}
#endregion
